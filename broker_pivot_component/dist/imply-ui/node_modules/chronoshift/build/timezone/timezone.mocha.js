import { expect } from 'chai';
import { testImmutableClass } from 'immutable-class-tester';
import { Timezone } from './timezone';
describe("Timezone", function () {
    it("is an immutable class", function () {
        testImmutableClass(Timezone, [
            "America/Los_Angeles",
            "Europe/Paris",
            "Etc/UTC"
        ]);
    });
    describe("errors", function () {
        it("throws error if invalid timezone", function () {
            expect(function () { return new Timezone(""); }).to.throw(Error, "timezone '' does not exist");
            expect(function () { return new Timezone("Blah/UTC"); }).to.throw(Error, "timezone 'Blah/UTC' does not exist");
            expect(function () { return new Timezone("America/Lost_Angeles"); }).to.throw(Error, "timezone 'America/Lost_Angeles' does not exist");
        });
    });
    describe("#toString", function () {
        it("gives back the correct string for LA", function () {
            var timezoneStr = "America/Los_Angeles";
            expect(new Timezone(timezoneStr).toString()).to.equal(timezoneStr);
        });
        it("gives back the correct string for UTC", function () {
            var timezoneStr = "Etc/UTC";
            expect(new Timezone(timezoneStr).toString()).to.equal(timezoneStr);
        });
        it("gives back the correct string for inbuilt UTC", function () {
            expect(Timezone.UTC.toString()).to.equal("Etc/UTC");
        });
    });
    describe(".isTimezone", function () {
        it("gives back the correct string for LA", function () {
            var timezoneStr = "America/Los_Angeles";
            expect(Timezone.isTimezone(new Timezone(timezoneStr))).to.equal(true);
        });
    });
    describe(".formatDateWithTimezone", function () {
        it("works with no timezone", function () {
            expect(Timezone.formatDateWithTimezone(new Date("2016-12-08T19:46:13.915Z"))).to.equal("2016-12-08T19:46:13.915Z");
            expect(Timezone.formatDateWithTimezone(new Date("2016-12-08T19:46:13.000Z"))).to.equal("2016-12-08T19:46:13Z");
        });
        it("works with UTC", function () {
            var tz = Timezone.UTC;
            expect(Timezone.formatDateWithTimezone(new Date("2016-12-08T19:46:13.915Z"), tz)).to.equal("2016-12-08T19:46:13.915Z");
            expect(Timezone.formatDateWithTimezone(new Date("2016-12-08T19:46:13.000Z"), tz)).to.equal("2016-12-08T19:46:13Z");
        });
        it("works with Asia/Kathmandu", function () {
            var tz = Timezone.fromJS('Asia/Kathmandu');
            expect(Timezone.formatDateWithTimezone(new Date("2016-12-08T19:46:13.915Z"), tz)).to.equal("2016-12-09T01:31:13.915+05:45");
            expect(Timezone.formatDateWithTimezone(new Date("2016-12-08T19:46:13.000Z"), tz)).to.equal("2016-12-09T01:31:13+05:45");
        });
    });
});
