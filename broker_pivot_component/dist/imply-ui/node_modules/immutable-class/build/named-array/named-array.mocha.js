"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var named_array_1 = require("./named-array");
describe("NamedArray", function () {
    var someArray = [
        { name: 'UK', score: 1 },
        { name: 'USA', score: 2 },
        { name: 'Italy', score: 3 }
    ];
    describe("get", function () {
        it('something that exists', function () {
            chai_1.expect(named_array_1.NamedArray.get(someArray, 'USA')).to.equal(someArray[1]);
        });
        it('something that does not exist', function () {
            chai_1.expect(named_array_1.NamedArray.get(someArray, 'Russia')).to.equal(null);
        });
    });
    describe("isValid", function () {
        var invalidArr = [
            { name: 'UK', score: 1 },
            { name: 'UK', score: 2 },
            { name: 'Italy', score: 3 }
        ];
        it('invalid array', function () {
            chai_1.expect(named_array_1.NamedArray.isValid(invalidArr)).to.equal(false);
        });
        it('valid array', function () {
            chai_1.expect(named_array_1.NamedArray.isValid(someArray)).to.equal(true);
        });
    });
    describe("checkValid", function () {
        var invalidArr = [
            { name: 'UK', score: 1 },
            { name: 'UK', score: 2 },
            { name: 'Italy', score: 3 }
        ];
        it('invalid array', function () {
            chai_1.expect(function () { return named_array_1.NamedArray.checkValid(invalidArr); }).to.throw("duplicate 'UK'");
        });
        it('valid array', function () {
            chai_1.expect(function () { return named_array_1.NamedArray.checkValid(someArray); }).to.not.throw();
        });
    });
    describe("containsByName", function () {
        it('something that exists', function () {
            chai_1.expect(named_array_1.NamedArray.containsByName(someArray, 'USA')).to.equal(true);
        });
        it('something that does not exist', function () {
            chai_1.expect(named_array_1.NamedArray.containsByName(someArray, 'Russia')).to.equal(false);
        });
    });
    describe("findIndexByName", function () {
        it('something that exists', function () {
            chai_1.expect(named_array_1.NamedArray.findIndexByName(someArray, 'USA')).to.equal(1);
        });
        it('something that does not exist', function () {
            chai_1.expect(named_array_1.NamedArray.findIndexByName(someArray, 'Russia')).to.equal(-1);
        });
    });
    describe("overrideByName", function () {
        it('overrides (in order)', function () {
            chai_1.expect(named_array_1.NamedArray.overrideByName(someArray, { name: 'USA', score: 5 })).to.deep.equal([
                { name: 'UK', score: 1 },
                { name: 'USA', score: 5 },
                { name: 'Italy', score: 3 }
            ]);
        });
        it('overrides appends', function () {
            chai_1.expect(named_array_1.NamedArray.overrideByName(someArray, { name: 'Russia', score: 5 })).to.deep.equal([
                { name: 'UK', score: 1 },
                { name: 'USA', score: 2 },
                { name: 'Italy', score: 3 },
                { name: 'Russia', score: 5 }
            ]);
        });
    });
    describe("overridesByName", function () {
        it('overrides (in order)', function () {
            chai_1.expect(named_array_1.NamedArray.overridesByName(someArray, [
                { name: 'USA', score: 52 },
                { name: 'Italy', score: 50 }
            ])).to.deep.equal([
                { name: 'UK', score: 1 },
                { name: 'USA', score: 52 },
                { name: 'Italy', score: 50 }
            ]);
        });
        it('overrides appends', function () {
            chai_1.expect(named_array_1.NamedArray.overridesByName(someArray, [
                { name: 'Country', score: 0 },
                { name: 'Russia', score: 5 }
            ])).to.deep.equal([
                { name: 'UK', score: 1 },
                { name: 'USA', score: 2 },
                { name: 'Italy', score: 3 },
                { name: 'Country', score: 0 },
                { name: 'Russia', score: 5 }
            ]);
        });
    });
    describe("deleteByName", function () {
        it('something that exists', function () {
            chai_1.expect(named_array_1.NamedArray.deleteByName(someArray, 'USA')).to.deep.equal([
                { name: 'UK', score: 1 },
                { name: 'Italy', score: 3 }
            ]);
        });
        it('something that does not exist', function () {
            chai_1.expect(named_array_1.NamedArray.deleteByName(someArray, 'Russia')).to.deep.equal(someArray);
        });
    });
    describe("findByNameCI", function () {
        it('something that exists', function () {
            chai_1.expect(named_array_1.NamedArray.findByNameCI(someArray, 'usa')).to.deep.equal({ name: 'USA', score: 2 });
            chai_1.expect(named_array_1.NamedArray.findByNameCI([{ name: 'UsA', score: 2 }], 'uSa')).to.deep.equal({ name: 'UsA', score: 2 });
        });
        it('something that does not exist', function () {
            chai_1.expect(named_array_1.NamedArray.findByNameCI(someArray, 'RUsSia')).to.equal(null);
        });
    });
    describe('synchronize', function () {
        function valueEqual(a, b) {
            return a.value === b.value;
        }
        it('one enter', function () {
            var ops = [];
            named_array_1.NamedArray.synchronize([], [{ name: 'A' }], {
                equals: valueEqual,
                onEnter: function (newThing) {
                    ops.push("Enter " + newThing.name);
                },
                onUpdate: function (newThing, oldThing) {
                    ops.push("Update " + oldThing.name + " " + oldThing.value + " => " + newThing.value);
                },
                onExit: function (oldThing) {
                    ops.push("Exit " + oldThing.name);
                }
            });
            chai_1.expect(ops.join('; ')).to.equal('Enter A');
        });
        it('one exit', function () {
            var ops = [];
            named_array_1.NamedArray.synchronize([{ name: 'A' }], [], {
                equals: valueEqual,
                onEnter: function (newThing) {
                    ops.push("Enter " + newThing.name);
                },
                onUpdate: function (newThing, oldThing) {
                    ops.push("Update " + oldThing.name + " " + oldThing.value + " => " + newThing.value);
                },
                onExit: function (oldThing) {
                    ops.push("Exit " + oldThing.name);
                }
            });
            chai_1.expect(ops.join('; ')).to.equal('Exit A');
        });
        it('enter / exit', function () {
            var ops = [];
            named_array_1.NamedArray.synchronize([{ name: 'A' }], [{ name: 'B' }], {
                equals: valueEqual,
                onEnter: function (newThing) {
                    ops.push("Enter " + newThing.name);
                },
                onUpdate: function (newThing, oldThing) {
                    ops.push("Update " + oldThing.name + " " + oldThing.value + " => " + newThing.value);
                },
                onExit: function (oldThing) {
                    ops.push("Exit " + oldThing.name);
                }
            });
            chai_1.expect(ops.join('; ')).to.equal('Enter B; Exit A');
        });
        it('enter / update / exit', function () {
            var ops = [];
            named_array_1.NamedArray.synchronize([{ name: 'A', value: 1 }, { name: 'B', value: 2 }], [{ name: 'B', value: 3 }, { name: 'C', value: 4 }], {
                equals: valueEqual,
                onEnter: function (newThing) {
                    ops.push("Enter " + newThing.name);
                },
                onUpdate: function (newThing, oldThing) {
                    ops.push("Update " + oldThing.name + " " + oldThing.value + " => " + newThing.value);
                },
                onExit: function (oldThing) {
                    ops.push("Exit " + oldThing.name);
                }
            });
            chai_1.expect(ops.join('; ')).to.equal('Update B 2 => 3; Enter C; Exit A');
        });
    });
});
