import { AttributeInfo } from '../../datatypes/index';
import { ApplyExpression, Expression } from '../../expressions/index';
import { CustomDruidAggregations, CustomDruidTransforms } from './druidTypes';
export interface AggregationsAndPostAggregations {
    aggregations: Druid.Aggregation[];
    postAggregations: Druid.PostAggregation[];
}
export interface DruidAggregationBuilderOptions {
    version: string;
    rawAttributes: AttributeInfo[];
    timeAttribute: string;
    derivedAttributes: Record<string, Expression>;
    customAggregations: CustomDruidAggregations;
    customTransforms: CustomDruidTransforms;
    rollup: boolean;
    exactResultsOnly: boolean;
    allowEternity: boolean;
}
export declare class DruidAggregationBuilder {
    static AGGREGATE_TO_FUNCTION: Record<string, Function>;
    static AGGREGATE_TO_ZERO: Record<string, string>;
    version: string;
    rawAttributes: AttributeInfo[];
    timeAttribute: string;
    derivedAttributes: Record<string, Expression>;
    customAggregations: CustomDruidAggregations;
    customTransforms: CustomDruidTransforms;
    rollup: boolean;
    exactResultsOnly: boolean;
    allowEternity: boolean;
    constructor(options: DruidAggregationBuilderOptions);
    makeAggregationsAndPostAggregations(applies: ApplyExpression[]): AggregationsAndPostAggregations;
    private applyToAggregation(action, aggregations, postAggregations);
    private applyToPostAggregation(apply, aggregations, postAggregations);
    private filterAggregateIfNeeded(datasetExpression, aggregator);
    private expressionToAggregation(name, expression, postAggregations);
    private countToAggregation(name, expression);
    private sumMinMaxToAggregation(name, expression);
    private getCardinalityExpressions(expression);
    private countDistinctToAggregation(name, expression, postAggregations);
    private customAggregateToAggregation(name, expression, postAggregations);
    private quantileToAggregation(name, expression, postAggregations);
    private makeJavaScriptAggregation(name, aggregate);
    private getAccessTypeForAggregation(aggregationType);
    private getAccessType(aggregations, aggregationName);
    private expressionToPostAggregation(ex, aggregations, postAggregations);
    private switchToRollupCount(expression);
    private getRollupCountName();
    private inlineDerivedAttributes(expression);
    private inlineDerivedAttributesInAggregate(expression);
    getAttributesInfo(attributeName: string): AttributeInfo;
    private versionBefore(neededVersion);
}
