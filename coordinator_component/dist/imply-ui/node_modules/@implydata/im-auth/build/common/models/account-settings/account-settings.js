"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");var immutable_class_1=require("immutable-class");var beltful_1=require("@implydata/beltful");var role_1=require("../role/role");var generateAvailableName=beltful_1.StringUtils.generateAvailableName;var AccountSettings=function(_super){tslib_1.__extends(AccountSettings,_super);function AccountSettings(){return _super!==null&&_super.apply(this,arguments)||this}AccountSettings.isAccountSettings=function(candidate){return candidate instanceof AccountSettings};AccountSettings.fromJS=function(parameters){return new AccountSettings(immutable_class_1.BaseImmutable.jsToValue(AccountSettings.PROPERTIES,parameters))};AccountSettings.prototype.updateRole=function(role){return this.changeRoles(immutable_class_1.NamedArray.overrideByName(this.getRoles(),role))};AccountSettings.prototype.deleteRole=function(name){return this.changeRoles(immutable_class_1.NamedArray.deleteByName(this.getRoles(),name))};AccountSettings.prototype.addRole=function(role){var roles=this.getRoles();if(immutable_class_1.NamedArray.findByName(roles,role.name)){throw new Error("Role: "+role.name+" already exists")}return this.updateRole(role)};AccountSettings.prototype.makeNewRole=function(){var roles=this.getRoles();return new role_1.Role({name:generateAvailableName({prefix:"role",isAvailable:function(name){return!immutable_class_1.NamedArray.findByName(roles,name)}}),permissions:[]})};AccountSettings.prototype.getRole=function(name){var roles=this.getRoles();if(!roles)return null;return immutable_class_1.NamedArray.findByName(roles,name)};AccountSettings.prototype.getSuperAdminRole=function(){return this.getRole(role_1.Role.SUPER_ADMIN_NAME)};AccountSettings.prototype.getRoleCounts=function(users){var _this=this;return this.getRoles().map(function(role){var name=role.name;return{name:name,users:users.filter(function(u){return u.getRoles().includes(name)}),permissions:name===role_1.Role.SUPER_ADMIN_NAME?_this.getPermissions():role.getPermissions()}})};AccountSettings.prototype.getPermissions=function(){var roles=this.getRoles();var permissionss=roles.map(function(r){return r.getPermissions()});var permissions=[].concat.apply([],permissionss);return permissions.filter(function(permission,i,arr){return arr.findIndex(function(r){return r.equals(permission)})===i})};AccountSettings.PROPERTIES=[{name:"accountId",defaultValue:null},{name:"roles",immutableClassArray:role_1.Role,defaultValue:[role_1.Role.SUPER_ADMIN,role_1.Role.USER]}];return AccountSettings}(immutable_class_1.BaseImmutable);exports.AccountSettings=AccountSettings;immutable_class_1.BaseImmutable.finalize(AccountSettings);