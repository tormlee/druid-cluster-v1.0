import { AttributeInfo } from '../../datatypes/index';
import { Expression } from '../../expressions/index';
import { CustomDruidTransforms } from './druidTypes';
export interface DruidFilterAndIntervals {
    filter: Druid.Filter;
    intervals: Druid.Intervals;
}
export interface DruidFilterBuilderOptions {
    version: string;
    rawAttributes: AttributeInfo[];
    timeAttribute: string;
    allowEternity: boolean;
    customTransforms: CustomDruidTransforms;
}
export declare class DruidFilterBuilder {
    static TIME_ATTRIBUTE: string;
    static TRUE_INTERVAL: string;
    version: string;
    rawAttributes: AttributeInfo[];
    timeAttribute: string;
    allowEternity: boolean;
    customTransforms: CustomDruidTransforms;
    constructor(options: DruidFilterBuilderOptions);
    filterToDruid(filter: Expression): DruidFilterAndIntervals;
    timeFilterToIntervals(filter: Expression): Druid.Intervals;
    timelessFilterToFilter(filter: Expression, aggregatorFilter: boolean): Druid.Filter;
    private checkFilterExtractability(attributeInfo);
    private makeJavaScriptFilter(ex);
    private valueToIntervals(value);
    private makeExtractionFilter(ex);
    private makeSelectorFilter(ex, value);
    private makeInFilter(ex, valueSet);
    private makeBoundFilter(ex, range);
    private makeIntervalFilter(ex, range);
    private makeRegexFilter(ex, regex);
    private makeContainsFilter(lhs, rhs, compare);
    private getSingleReferenceAttributeInfo(ex);
    private getDimensionNameForAttributeInfo(attributeInfo);
    private versionBefore(neededVersion);
    getAttributesInfo(attributeName: string): AttributeInfo;
    isTimeRef(ex: Expression): boolean;
}
