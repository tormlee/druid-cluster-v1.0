import { Expression } from '../../expressions/index';
import { CustomDruidTransforms } from './druidTypes';
export interface DruidExtractionFnBuilderOptions {
    version: string;
    customTransforms: CustomDruidTransforms;
}
export declare class DruidExtractionFnBuilder {
    static SPAN_TO_FLOOR_FORMAT: Record<string, string>;
    static SPAN_TO_PROPERTY: Record<string, string>;
    static CASE_TO_DRUID: Record<string, string>;
    static TIME_PART_TO_FORMAT: Record<string, string>;
    static TIME_PART_TO_EXPR: Record<string, string>;
    static composeFns(f: Druid.ExtractionFn | null, g: Druid.ExtractionFn | null): Druid.ExtractionFn | null;
    static getLastFn(fn: Druid.ExtractionFn): Druid.ExtractionFn;
    static wrapFunctionTryCatch(lines: string[]): string;
    version: string;
    customTransforms: CustomDruidTransforms;
    constructor(options: DruidExtractionFnBuilderOptions);
    expressionToExtractionFn(expression: Expression): Druid.ExtractionFn | null;
    private expressionToExtractionFnPure(expression);
    private literalToExtractionFn(expression);
    private refToExtractionFn(expression);
    private concatToExtractionFn(expression);
    private timeFloorToExtractionFn(expression);
    private timePartToExtractionFn(expression);
    private numberBucketToExtractionFn(expression);
    private substrToExtractionFn(expression);
    private transformCaseToExtractionFn(expression);
    private lengthToExtractionFn(expression);
    private extractToExtractionFn(expression);
    private lookupToExtractionFn(expression);
    private fallbackToExtractionFn(expression);
    private customTransformToExtractionFn(customTransform);
    private castToExtractionFn(cast);
    private overlapToExtractionFn(expression);
    private expressionToJavaScriptExtractionFn(ex);
    private versionBefore(neededVersion);
}
