"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var simple_array_1 = require("../simple-array/simple-array");
var KeyedArray = (function () {
    function KeyedArray(keyGetter) {
        this.getKey = keyGetter;
    }
    KeyedArray.withKey = function (key) {
        return new KeyedArray(function (x) { return x[key]; });
    };
    KeyedArray.prototype.get = function (array, key) {
        var getKey = this.getKey;
        return simple_array_1.SimpleArray.find(array, function (x) { return getKey(x) === key; });
    };
    KeyedArray.prototype.checkValid = function (array) {
        var getKey = this.getKey;
        var seen = {};
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var a = array_1[_i];
            var key = getKey(a);
            if (seen[key])
                throw new Error("duplicate '" + key + "'");
            seen[key] = 1;
        }
    };
    KeyedArray.prototype.isValid = function (array) {
        var getKey = this.getKey;
        var seen = {};
        for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {
            var a = array_2[_i];
            var key = getKey(a);
            if (seen[key])
                return false;
            seen[key] = 1;
        }
        return true;
    };
    KeyedArray.prototype.overrideByKey = function (things, thingOverride) {
        var getKey = this.getKey;
        var overrideKey = getKey(thingOverride);
        var added = false;
        things = things.map(function (t) {
            if (getKey(t) === overrideKey) {
                added = true;
                return thingOverride;
            }
            else {
                return t;
            }
        });
        if (!added)
            things.push(thingOverride);
        return things;
    };
    KeyedArray.prototype.overridesByKey = function (things, thingOverrides) {
        for (var _i = 0, thingOverrides_1 = thingOverrides; _i < thingOverrides_1.length; _i++) {
            var thingOverride = thingOverrides_1[_i];
            things = this.overrideByKey(things, thingOverride);
        }
        return things;
    };
    KeyedArray.prototype.deleteByKey = function (array, key) {
        var getKey = this.getKey;
        return array.filter(function (a) { return getKey(a) !== key; });
    };
    return KeyedArray;
}());
exports.KeyedArray = KeyedArray;
