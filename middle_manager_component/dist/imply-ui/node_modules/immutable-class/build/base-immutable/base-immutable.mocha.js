"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var car_mock_1 = require("./car.mock");
describe("BaseImmutable", function () {
    it("works with basics", function () {
        var car = car_mock_1.Car.fromJS({ name: 'ford', fuel: 'electric' });
        chai_1.expect(car.get('name')).to.equal('ford');
        chai_1.expect(car.get('fuel')).to.equal('electric');
        chai_1.expect(car.getRange()).to.equal(100);
        car = car.change('fuel', 'gas');
        chai_1.expect(car.get('fuel')).to.equal('gas');
        car = car.changeFuel('diesel');
        chai_1.expect(car.getFuel()).to.equal('diesel');
        car = car.changeRange(0);
        chai_1.expect(car.getRange()).to.equal(0);
        chai_1.expect(car.toJS()).to.deep.equal({
            "fuel": "diesel",
            "name": "ford",
            "range": 0
        });
        chai_1.expect(car.getRelatedCars()).to.deep.equal([]);
        var car2 = car_mock_1.Car.fromJS(car.toJS());
        chai_1.expect(car2.equals(car)).to.equal(true);
        chai_1.expect(car2.toJS()).to.deep.equal(car.toJS());
    });
    it("calling general getter calls defined getter", function () {
        var ford = car_mock_1.Car.fromJS({ name: 'ford' });
        chai_1.expect(ford.get('subCar').getName()).to.deep.equal('pinto');
        chai_1.expect(ford.getSubCar().getName()).to.deep.equal('pinto');
        var toyota = car_mock_1.Car.fromJS({ name: 'toyota' });
        chai_1.expect(toyota.get('subCar').getName()).to.deep.equal('prius');
        chai_1.expect(toyota.getSubCar().getName()).to.deep.equal('prius');
    });
    it("calling general changer calls defined changer", function () {
        var leaf = car_mock_1.Car.fromJS({ name: 'leaf', fuel: 'electric' });
        chai_1.expect(leaf.change('range', 900).getRange()).to.equal(400);
        chai_1.expect(leaf.changeRange(900).getRange()).to.equal(400);
        var truck = car_mock_1.Car.fromJS({ name: 'truck', fuel: 'diesel' });
        chai_1.expect(truck.change('range', 900).getRange()).to.equal(900);
        chai_1.expect(truck.changeRange(900).getRange()).to.equal(900);
    });
    it("works with changeMany", function () {
        var leaf = car_mock_1.Car.fromJS({ name: 'leaf', fuel: 'electric' });
        leaf = leaf.changeMany({
            fuel: 'diesel',
            name: 'ford',
            range: 900
        });
        chai_1.expect(leaf.getFuel()).to.eq('diesel');
        chai_1.expect(leaf.getName()).to.eq('ford');
        chai_1.expect(leaf.getRange()).to.eq(900);
    });
    it("works with dates", function () {
        var car = car_mock_1.Car.fromJS({ name: 'ford', fuel: 'electric', createdOn: '2016-01-01T01:02:03.456Z' });
        chai_1.expect(car.toJS()).to.deep.equal({
            "name": "ford",
            "fuel": "electric",
            "createdOn": new Date('2016-01-01T01:02:03.456Z')
        });
    });
    it("works with errors", function () {
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({ fuel: 'electric' });
        }).to.throw('Car.name must be defined');
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({ name: 'Ford', fuel: 'electric' });
        }).to.throw('Car.name must be lowercase');
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({ name: 'ford', fuel: 'farts' });
        }).to.throw("Car.fuel can not have value 'farts' must be one of [gas, diesel, electric]");
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({ name: 'ford', fuel: 'electric', range: 'lol' });
        }).to.throw("Car.range must be a number");
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({ name: 'ford', fuel: 'electric', range: -3 });
        }).to.throw("Car.range must non negative positive");
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({
                name: 'ford',
                fuel: 'electric',
                range: 30,
                relatedCars: 123
            });
        }).to.throw("expected relatedCars to be an array");
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({
                name: 'ford',
                fuel: 'electric',
                range: 30,
                relatedCars: [
                    { name: 'Toyota', fuel: 'electric', range: 31 },
                    { name: 'Toyota', fuel: 'electric', range: 32 }
                ]
            });
        }).to.throw("Car.name must be lowercase");
        chai_1.expect(function () {
            car_mock_1.Car.fromJS({
                name: 'ford',
                fuel: 'electric',
                range: 30,
                createdOn: 'time for laughs'
            });
        }).to.throw("Car.createdOn must be a Date");
    });
    it("works with back compat", function () {
        chai_1.expect(car_mock_1.Car.fromJS({
            name: 'ford',
            fuelType: 'electric'
        }).toJS()).to.deep.equal({
            name: 'ford',
            fuel: 'electric'
        });
    });
    it("works with deep get", function () {
        var car = car_mock_1.Car.fromJS({
            fuel: 'electric',
            name: 'ford',
            subCar: {
                name: 'focus',
                subCar: {
                    name: 'focus2'
                }
            }
        });
        chai_1.expect(car.deepGet('subCar.subCar.name')).to.equal('focus2');
    });
    it("works with deep change", function () {
        var car = car_mock_1.Car.fromJS({
            fuel: 'electric',
            name: 'ford',
            subCar: {
                name: 'focus',
                subCar: {
                    name: 'focus2'
                }
            }
        });
        var newCar = car.deepChange('subCar.subCar', { name: 'anuford' });
        chai_1.expect(newCar.deepGet('subCar.subCar.name')).to.equal('anuford');
    });
});
