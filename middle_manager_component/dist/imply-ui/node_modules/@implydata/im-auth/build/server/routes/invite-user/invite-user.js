"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");var nike_hercules_1=require("@implydata/nike-hercules");var user_1=require("../../../common/models/user/user");var views_1=require("../../views");function inviteUserRouterFactory(options){var _this=this;var appName=options.appName,userNameLabel=options.userNameLabel,showTerms=options.showTerms;var router=nike_hercules_1.HerculesServer.makeRouter();router.get("/",function(req,res,next){return tslib_1.__awaiter(_this,void 0,void 0,function(){var userName,token,accountId,inviteToken,e_1;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:userName=req.query.user;token=req.query.token;accountId=req.query.account;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,req.inviteTokenStore.get(userName)];case 2:inviteToken=_a.sent();return[3,4];case 3:e_1=_a.sent();req.logger.log("error in token processing: "+e_1.message);if(e_1.hasOwnProperty("stack")){req.logger.log(e_1.stack)}res.status(500).send({error:"Could not process link",message:e_1.message});return[2];case 4:if(!inviteToken||inviteToken.value!==token||inviteToken.hasExpired()){res.status(500).send({error:"Could not process link",message:"Link has been used or has expired"});return[2]}res.send(views_1.loginLayout({version:req.version,title:req.title,appName:appName,userNameLabel:userNameLabel,showTerms:showTerms,userName:userName,inviteToken:inviteToken.value,accountId:accountId}));return[2]}})})});router.post("/accept",function(req,res,next){return tslib_1.__awaiter(_this,void 0,void 0,function(){var _a,name,pass,token,accountId,user,e_2,inviteToken,e_3,e_4;return tslib_1.__generator(this,function(_b){switch(_b.label){case 0:_a=req.body,name=_a.name,pass=_a.pass,token=_a.token,accountId=_a.accountId;if(typeof name!=="string"){res.status(400).send({error:"must have a name"});return[2]}if(typeof pass!=="string"){res.status(400).send({error:"must have a pass"});return[2]}if(typeof token!=="string"){res.status(400).send({error:"must have a token"});return[2]}if(req.authorizer.hasAccounts()&&typeof accountId!=="string"){res.status(400).send({error:"must have an account id"});return[2]}_b.label=1;case 1:_b.trys.push([1,3,,4]);return[4,req.authorizer.getUser(name)];case 2:user=_b.sent();return[3,4];case 3:e_2=_b.sent();res.status(500).send({error:"Could not get user "+e_2.message});return[2];case 4:if(!user){res.status(400).send({error:"Could not get user"});return[2]}_b.label=5;case 5:_b.trys.push([5,7,,8]);return[4,req.inviteTokenStore.get(name)];case 6:inviteToken=_b.sent();return[3,8];case 7:e_3=_b.sent();res.status(500).send({error:"Could not process token"+e_3.message});return[2];case 8:if(!inviteToken||inviteToken.value!==token||inviteToken.hasExpired()){res.status(403).send({error:"Invalid token"});return[2]}_b.label=9;case 9:_b.trys.push([9,13,,14]);return[4,req.inviteTokenStore.deleteByKey(name)];case 10:_b.sent();return[4,req.authorizer.changePassword(name,pass)];case 11:_b.sent();return[4,req.authorizer.addOrUpdateUser(user.changeStatus(user_1.User.STATUS_OK))];case 12:_b.sent();return[3,14];case 13:e_4=_b.sent();res.status(500).send({error:"Could not update user"+e_4.message});return[2];case 14:req.session.loggedIn=true;req.session.userName=user.name;res.send({status:"ok"});return[2]}})})});return router}exports.inviteUserRouterFactory=inviteUserRouterFactory;