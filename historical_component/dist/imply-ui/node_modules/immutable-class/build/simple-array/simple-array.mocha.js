"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var simple_array_1 = require("./simple-array");
describe("SimpleArray", function () {
    var someArray = [
        'UK',
        'USA',
        'Italy'
    ];
    describe("find", function () {
        it('something that exists', function () {
            chai_1.expect(simple_array_1.SimpleArray.find(someArray, function (x) { return x.length === 3; })).to.equal('USA');
        });
        it('something that does not exist', function () {
            chai_1.expect(simple_array_1.SimpleArray.find(someArray, function (x) { return x.length === 7; })).to.equal(null);
        });
    });
    describe("findIndex", function () {
        it('something that exists', function () {
            chai_1.expect(simple_array_1.SimpleArray.findIndex(someArray, function (x) { return x.length === 3; })).to.equal(1);
        });
        it('something that does not exist', function () {
            chai_1.expect(simple_array_1.SimpleArray.findIndex(someArray, function (x) { return x.length === 7; })).to.equal(-1);
        });
    });
    describe("delete", function () {
        it('something that exists', function () {
            chai_1.expect(simple_array_1.SimpleArray.delete(someArray, 'USA')).to.deep.equal(['UK', 'Italy']);
        });
        it('something that does not exist', function () {
            chai_1.expect(simple_array_1.SimpleArray.delete(someArray, 'Russia')).to.deep.equal(['UK', 'USA', 'Italy']);
        });
        it('custom equals that does exist', function () {
            var array = [{ 'country': 'US' }, { 'country': 'UK' }, { 'country': 'Italy' }];
            chai_1.expect(simple_array_1.SimpleArray.delete(array, function (a) { return a.country === 'UK'; })).to.deep.equal([
                {
                    "country": "US"
                },
                {
                    "country": "Italy"
                }
            ]);
        });
    });
    describe("contains", function () {
        it('something that exists', function () {
            chai_1.expect(simple_array_1.SimpleArray.contains(someArray, 'USA')).to.equal(true);
        });
        it('something that does not exist', function () {
            chai_1.expect(simple_array_1.SimpleArray.contains(someArray, 'Russia')).to.equal(false);
        });
        it('custom equals that does exist', function () {
            var array = [{ 'country': 'US' }, { 'country': 'UK' }, { 'country': 'Italy' }];
            chai_1.expect(simple_array_1.SimpleArray.contains(array, function (x) { return x.country === 'UK'; })).to.deep.equal(true);
        });
    });
    describe('insertIndex', function () {
        it('works in simple case 0', function () {
            var list = "ABCD".split('');
            chai_1.expect(simple_array_1.SimpleArray.insertIndex(list, 0, "Pre").join('')).to.equal('PreABCD');
        });
    });
    describe('moveIndex', function () {
        it('errors', function () {
            var list = "ABCD".split('');
            chai_1.expect(function () { return simple_array_1.SimpleArray.moveIndex(list, 6, 0); }).to.throw('itemIndex out of range');
        });
        it('works in simple case 0', function () {
            var list = "ABCD".split('');
            chai_1.expect(simple_array_1.SimpleArray.moveIndex(list, 0, 0).join('')).to.equal('ABCD');
        });
        it('works in simple case 1', function () {
            var list = "ABCD".split('');
            chai_1.expect(simple_array_1.SimpleArray.moveIndex(list, 0, 1).join('')).to.equal('ABCD');
        });
        it('works in simple case 2', function () {
            var list = "ABCD".split('');
            chai_1.expect(simple_array_1.SimpleArray.moveIndex(list, 0, 2).join('')).to.equal('BACD');
        });
        it('works in simple case 3', function () {
            var list = "ABCD".split('');
            chai_1.expect(simple_array_1.SimpleArray.moveIndex(list, 0, 3).join('')).to.equal('BCAD');
        });
        it('works in simple case 4', function () {
            var list = "ABCD".split('');
            chai_1.expect(simple_array_1.SimpleArray.moveIndex(list, 0, 4).join('')).to.equal('BCDA');
        });
    });
});
