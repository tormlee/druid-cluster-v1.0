"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");var beltful_1=require("@implydata/beltful");var NodeCache=require("node-cache");var Memcached=require("memcached");var QueryCache=function(){function e(r){var t=r.config,o=r.logger;this.config=t;this.logger=o;this.lifetime=t.lifetime||e.DEFAULT_LIFETIME;this.prefix=t.prefix||""}e.prototype.getKey=function(e){var r=this.prefix;return r+beltful_1.StringUtils.objectHashHex18(e)};e.DEFAULT_LIFETIME=300;return e}();exports.QueryCache=QueryCache;var LocalQueryCache=function(e){tslib_1.__extends(r,e);function r(r){var t=e.call(this,r)||this;var o=r.config;if(o.type!=="local")throw new Error("query cache type must be 'local'");t.nodeCache=new NodeCache({stdTTL:t.lifetime});return t}r.prototype.setValue=function(e,r){var t=this.nodeCache;var o=this.getKey(e);t.set(o,r);return Promise.resolve(null)};r.prototype.getValue=function(e){var r=this.nodeCache;var t=this.getKey(e);return Promise.resolve(r.get(t)||null)};return r}(QueryCache);exports.LocalQueryCache=LocalQueryCache;var MemcachedQueryCache=function(e){tslib_1.__extends(r,e);function r(r){var t=e.call(this,r)||this;var o=r.config,n=r.logger;if(o.type!=="memcached")throw new Error("query cache type must be 'memcached'");var c=new Memcached(o.servers,o.options);c.on("failure",function(e){n.error("Memcached server "+e.server+" went down due to: "+e.messages.join(", "))});c.on("reconnecting",function(e){n.log("Memcached is reconnecting to server "+e.server+", total downtime: "+e.totalDownTime+"ms")});c.on("reconnect",function(e){n.log("Memcached is reconnected to server "+e.server)});t.memcached=c;return t}r.prototype.setValue=function(e,r){var t=this,o=t.memcached,n=t.lifetime;var c=this.getKey(e);return Promise.race([new Promise(function(e,t){o.set(c,r,n,function(r){if(r){t(r)}else{e()}})}),new Promise(function(e,r){setTimeout(function(){r(new Error("set timeout"))},100)})])};r.prototype.getValue=function(e){var r=this.memcached;var t=this.getKey(e);return Promise.race([new Promise(function(e,o){r.get(t,function(r,t){if(r){o(r)}else{e(t)}})}),new Promise(function(e,r){setTimeout(function(){r(new Error("get timeout"))},100)})])};return r}(QueryCache);exports.MemcachedQueryCache=MemcachedQueryCache;