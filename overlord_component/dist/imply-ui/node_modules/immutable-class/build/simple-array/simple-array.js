"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleArray = (function () {
    function SimpleArray() {
    }
    SimpleArray.append = function (array, value) {
        return array.concat([value]);
    };
    SimpleArray.change = function (array, index, value) {
        array = array.slice();
        array[index] = value;
        return array;
    };
    SimpleArray.find = function (array, fn) {
        for (var i = 0, n = array.length; i < n; i++) {
            var a = array[i];
            if (fn.call(array, a, i))
                return a;
        }
        return null;
    };
    SimpleArray.findIndex = function (array, fn) {
        for (var i = 0, n = array.length; i < n; i++) {
            var a = array[i];
            if (fn.call(array, a, i))
                return i;
        }
        return -1;
    };
    SimpleArray.delete = function (array, arg) {
        return array.filter(function (a, i, arr) { return typeof arg === 'function' ? !(arg.call(arr, a, i)) : a !== arg; });
    };
    SimpleArray.deleteIndex = function (array, index) {
        return array.filter(function (a, i) { return i !== index; });
    };
    SimpleArray.contains = function (array, arg) {
        if (typeof arg !== 'function')
            return array.indexOf(arg) !== -1;
        return SimpleArray.findIndex(array, arg) !== -1;
    };
    SimpleArray.insertIndex = function (array, index, value) {
        array = array.slice();
        array.splice(index, 0, value);
        return array;
    };
    SimpleArray.moveIndex = function (array, itemIndex, insertIndex) {
        var n = array.length;
        if (itemIndex < 0 || itemIndex >= n)
            throw new Error('itemIndex out of range');
        if (insertIndex < 0 || insertIndex > n)
            throw new Error('insertIndex out of range');
        var newArray = [];
        array.forEach(function (value, i) {
            if (i === insertIndex)
                newArray.push(array[itemIndex]);
            if (i !== itemIndex)
                newArray.push(value);
        });
        if (n === insertIndex)
            newArray.push(array[itemIndex]);
        return newArray;
    };
    return SimpleArray;
}());
exports.SimpleArray = SimpleArray;
